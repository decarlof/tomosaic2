import numpy as npfrom numpy.fft import fftn, ifftn, fftshift, ifftshiftimport dxchange__all__ = ['retrieve_phase']def retrieve_phase(data, lat_voxel, method='mba', **kwargs):    allowed_kwargs = {'mba': ['alpha']}    if method not in allowed_kwargs:        raise ValueError    for key, value in list(kwargs.items()):        if key not in allowed_kwargs[method]:            raise ValueError('Invalid options for selected phase retrieval method.')    func = _get_func(method)    return func(data, lat_voxel, **kwargs)def _get_func(method):    if method == 'mba':        func = mba    return funcdef gen_mesh(max, shape):    """Generate mesh grid.    Parameters:    -----------    lengths : ndarray        Half-lengths of axes in nm or nm^-1.    shape : ndarray        Number of pixels in each dimension.    """    yy = np.linspace(-max[0], max[0], shape[0])    xx = np.linspace(-max[1], max[1], shape[1])    res = np.meshgrid(xx, yy)    return resdef mba(input, lat_voxel, alpha=0.001):    """Modified Bronnikov algorithm for phase retrieval.    """    assert isinstance(input, np.ndarray)    g = input - 1    voxel_y, voxel_x = lat_voxel    u_max = 1. / (2. * voxel_x)    v_max = 1. / (2. * voxel_y)    u, v = gen_mesh([v_max, u_max], input.shape)    H = 1 / (u ** 2 + v ** 2 + alpha)    phase = np.real(ifftn(ifftshift(fftshift(fftn(g)) * H)))    return phase
